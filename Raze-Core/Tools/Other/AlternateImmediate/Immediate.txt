using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace Raze;

public partial class Assembler
{
    public partial struct Instruction
    {
        // Immediate Data. (1, 2, or 4 bytes). Optional

        internal interface ITImmediate<Immediate> : IInstruction
        {
            static abstract ITImmediate<Immediate> New(Immediate t);
        }
        internal interface IImmediateGenerator<Signed, Unsigned, Floating, TSigned, TUnsigned, TFloating> : IInstruction
            where TSigned : ITImmediate<Signed>
            where TUnsigned : ITImmediate<Unsigned>
            where TFloating : ITImmediate<Floating>
            where Unsigned : IConvertible, new()
        {
            public static TSigned Generate(Signed _data) => (TSigned)TSigned.New(_data);
            public static TFloating Generate(Floating _data) => (TFloating)TFloating.New(_data);
            public static TUnsigned Generate(string _data)
            {
                unsafe
                {
                    Unsigned res = new();
                    for (int i = 0; i < sizeof(Unsigned); i++)
                    {
                        int resAsInt = Convert.ToInt32(res);
                        int value = resAsInt << 8 | _data[i];
                        res = (Unsigned)Convert.ChangeType(value, typeof(Unsigned));
                    }
                    return (TUnsigned)TUnsigned.New(res);
                }
            }
            public static TUnsigned Generate(Unsigned _data) => (TUnsigned)TUnsigned.New(_data);
            public static TUnsigned Generate(bool _data) => (TUnsigned)TUnsigned.New((Unsigned)Convert.ChangeType(_data, typeof(Unsigned)));
        }
        internal interface IImmediate<Signed, Unsigned, Floating, TSigned, TUnsigned, TFloating>
            : IImmediateGenerator<Signed, Unsigned, Floating, TSigned, TUnsigned, TFloating>
            where TSigned : ITImmediate<Signed>
            where TUnsigned : ITImmediate<Unsigned>
            where TFloating : ITImmediate<Floating>
            where Unsigned : IConvertible, new()
        { }


        // 1 Byte Immediate
        internal interface Immediate8 : IImmediate<sbyte, byte, Half, Immediate8SByte, Immediate8Byte, Immediate8Half>
        {
        }
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        internal struct Immediate8SByte : ITImmediate<sbyte>
        {
            sbyte _data;
            internal Immediate8SByte(sbyte _data) { this._data = _data; }

            public static ITImmediate<sbyte> New(sbyte t) { return new Immediate8SByte(t); }
        }
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        internal struct Immediate8Half : ITImmediate<Half>
        {
            Half _data;
            internal Immediate8Half(Half _data) { this._data = _data; }
            public static ITImmediate<Half> New(Half t) { return new Immediate8Half(t); }
        }
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        internal struct Immediate8Byte : ITImmediate<byte>
        {
            byte _data;
            internal Immediate8Byte(byte _data) { this._data = _data; }
            public static ITImmediate<byte> New(byte t) { return new Immediate8Byte(t); }
        }


        // 2 Byte Immediate
        internal interface Immediate16 : IImmediate<short, ushort, Half, Immediate16Short, Immediate16UShort, Immediate16Half>
        {
        }
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        internal struct Immediate16Short : ITImmediate<short>
        {
            short _data;
            internal Immediate16Short(short _data) { this._data = _data; }
            public static ITImmediate<short> New(short t) { return new Immediate16Short(t); }
        }
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        internal struct Immediate16Half : ITImmediate<Half>
        {
            Half _data;
            internal Immediate16Half(Half _data) { this._data = _data; }
            public static ITImmediate<Half> New(Half t) { return new Immediate16Half(t); }
        }
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        internal struct Immediate16UShort : ITImmediate<ushort>
        {
            ushort _data;
            internal Immediate16UShort(ushort _data) { this._data = _data; }
            public static ITImmediate<ushort> New(ushort t) { return new Immediate16UShort(t); }
        }


        // 4 Byte Immediate
        internal interface Immediate32 : IImmediate<int, uint, float, Immediate32Int, Immediate32UInt, Immediate32Float>
        {

        }
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        internal struct Immediate32Int : ITImmediate<int>
        {
            int _data;
            internal Immediate32Int(int _data) { this._data = _data; }
            public static ITImmediate<int> New(int t) { return new Immediate32Int(t); }
        }
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        internal struct Immediate32Float : ITImmediate<float>
        {
            float _data;
            internal Immediate32Float(float _data) { this._data = _data; }
            public static ITImmediate<float> New(float t) { return new Immediate32Float(t); }
        }
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        internal struct Immediate32UInt : ITImmediate<uint>
        {
            uint _data;
            internal Immediate32UInt(uint _data) { this._data = _data; }
            public static ITImmediate<uint> New(uint t) { return new Immediate32UInt(t); }
        }


        // 8 byte immediate
        internal interface Immediate64 : IImmediate<long, ulong, double, Immediate64Long, Immediate64ULong, Immediate64Double>
        {
        }
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        internal struct Immediate64Long : ITImmediate<long>
        {
            long _data;
            internal Immediate64Long(long _data) { this._data = _data; }

            public static ITImmediate<long> New(long t) { return new Immediate64Long(t); }
        }
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        internal struct Immediate64Double : ITImmediate<double>
        {
            double _data;
            internal Immediate64Double(double _data) { this._data = _data; }

            public static ITImmediate<double> New(double t) { return new Immediate64Double(t); }
        }
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        internal struct Immediate64ULong : ITImmediate<ulong>
        {
            ulong _data;
            internal Immediate64ULong(ulong _data) { this._data = _data; }

            public static ITImmediate<ulong> New(ulong t) { return new Immediate64ULong(t); }
        }
    }
}
