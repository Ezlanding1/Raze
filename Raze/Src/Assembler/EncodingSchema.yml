# OperandType:
  # A = A-Register
  # AL/AX/EAX/RAX = A-Register 8/16/32/64 bit

  # R = Register
  # R8/R16/R32/R64 = Register 8/16/32/64 bit

  # M = Memory
  # M8/M16/M32/M64 = Memory 8/16/32/64 bit

  # IMM = Immediate
  # IMM8/IMM16/IMM32/IMM64 = Immediate 8/16/32/64 bit

  # RM = Register/Memory
  # RM8/RM16/RM32/RM64 = Register/Memory 8/16/32/64 bit

# EncodingTypes:
  # RexWPrefix = Emit a REX Prefix with the W bit set (0b01001000)
  # ExpansionPrefix = Emit Expansion Prefix (0x0F)
  # SizePrefix = Emit Size Prefix (0x66)
  # Any combination of these flags can be encoded by separating two EncodingTypes with bitwise or '|' or comma ','
  
ADD:
- Instruction: ADD AL, IMM8
  OpCode: 0x4
- Instruction: ADD AX, IMM16
  OpCode: 0x5
- Instruction: ADD EAX, IMM32
  OpCode: 0x5
- Instruction: ADD RAX, IMM32
  EncodingType: RexWPrefix
  OpCode: 0x5

- Instruction: ADD RM64, R64
  EncodingType: RexWPrefix
  OpCode: 0x1
- Instruction: ADD RM8, R8
  OpCode: 0x0


MOV:
- Instruction: MOV M8, IMM8
  OpCodeExtension: 0
  OpCode: 0xC6
- Instruction: MOV M16, IMM16
  OpCodeExtension: 0
  EncodingType: SizePrefix
  OpCode: 0xC7
- Instruction: MOV M32, IMM32
  OpCodeExtension: 0
  OpCode: 0xC7
- Instruction: MOV M64, IMM32
  OpCodeExtension: 0
  EncodingType: RexWPrefix
  OpCode: 0xC7

- Instruction: MOV RM64, IMM32
  EncodingType: RexWPrefix
  OpCode: 0xC7
- Instruction: MOV RM16, IMM16
  EncodingType: SizePrefix
  OpCode: 0xC7
- Instruction: MOV RM64, R64
  EncodingType: RexWPrefix
  OpCode: 0x89
